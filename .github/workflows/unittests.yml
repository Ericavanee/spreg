 name: Continuous Integration
 
 on:
   push:
     branches:
     - '*'
   pull_request:
     branches:
     - '*'
   schedule:
     - cron: '59 23 * * *'

 jobs:
   unittests:
     name: ${{ matrix.os }}, ${{ matrix.environment-file }}
     runs-on: ${{ matrix.os }}
     timeout-minutes: 30
     strategy:
       matrix:
         os: [macos-latest, ubuntu-latest]
         ############################################ replace above with this chunk when Windows testing gets worked out
         os: [macos-latest, ubuntu-latest, windows-latest]
         ############################################
         #environment-file: [ci/37-GIT.yaml, ci/37-PYPI.yaml, ci/37-GIT-PLUS.yaml, ci/37-PYPI-PLUS.yaml, ci/38-GIT.yaml, ci/38-PYPI.yaml, ci/38-GIT-PLUS.yaml, ci/38-PYPI-PLUS.yaml]
         ############################################ replace above with this chunk when Python 3.9 dependecies get worked out
         environment-file: [ci/37.yaml, ci/38.yaml, ci/39.yaml]
         include:
           - environment-file: ci/39-BASE.yaml
             os: ubuntu-latest
           - environment-file: ci/39-DEV.yaml
             os: ubuntu-latest
         ############################################ uncomment this chunk when Windows testing gets worked out
         #exclude:
         #  - environment-file: ci/36-PYPI-PLUS.yaml
         #    os: windows-latest
         #  - environment-file: ci/36-GIT-PLUS.yaml
         #    os: windows-latest
         ############################################
     
     steps:
       - name: checkout repo
         uses: actions/checkout@v2
       
       - name: setup micromamba
         uses: mamba-org/provision-with-micromamba@main
         with:
           environment-file: ${{ matrix.environment-file }}
           micromamba-version: 'latest'
     
       #- run: pytest -v spreg --cov=spreg --cov-config=.coveragerc --cov-report=xml
       ############################################## replace above with this chunk when docstring testing gets worked out
       #- run: pytest -v spreg --cov=spreg --doctest-modules --cov-config=.coveragerc --cov-report=xml
       ##############################################
       
       - name: install bleeding edge libpysal (only Ubuntu / Python 3.9)
         shell: bash -l {0}
         run: pip install git+https://github.com/pysal/libpysal.git@master
         if: matrix.os == 'ubuntu-latest' && contains(matrix.environment-file, 'DEV')
       
       - name: run tests - bash
         shell: bash -l {0}
         run: pytest -v spreg --cov=spreg --cov-config=.coveragerc --cov-report=xml
         ############################################## replace above with this chunk when docstring testing gets worked out
         #run: pytest -v spreg --cov=spreg --doctest-modules --cov-config=.coveragerc --cov-report=xml
         ##############################################
         if: matrix.os != 'windows-latest'
       
       - name: run tests - powershell
         shell: powershell
         run: pytest -v spreg --cov=spreg --cov-config=.coveragerc --cov-report=xml
         ############################################## replace above with this chunk when docstring testing gets worked out
         #run: pytest -v spreg --cov=spreg --doctest-modules --cov-config=.coveragerc --cov-report=xml
         ##############################################
         if: matrix.os == 'windows-latest'
       
       - name: codecov
         uses: codecov/codecov-action@v1
         with:
           token: ${{ secrets.CODECOV_TOKEN }}
           file: ./coverage.xml
           name: spreg-codecov
